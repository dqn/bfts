type Itoa = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "20",
  "21",
  "22",
  "23",
  "24",
  "25",
  "26",
  "27",
  "28",
  "29",
  "30",
  "31",
  "32",
  "33",
  "34",
  "35",
  "36",
  "37",
  "38",
  "39",
  "40",
  "41",
  "42",
  "43",
  "44",
  "45",
  "46",
  "47",
  "48",
  "49",
  "50",
  "51",
  "52",
  "53",
  "54",
  "55",
  "56",
  "57",
  "58",
  "59",
  "60",
  "61",
  "62",
  "63",
  "64",
  "65",
  "66",
  "67",
  "68",
  "69",
  "70",
  "71",
  "72",
  "73",
  "74",
  "75",
  "76",
  "77",
  "78",
  "79",
  "80",
  "81",
  "82",
  "83",
  "84",
  "85",
  "86",
  "87",
  "88",
  "89",
  "90",
  "91",
  "92",
  "93",
  "94",
  "95",
  "96",
  "97",
  "98",
  "99",
  "100",
  "101",
  "102",
  "103",
  "104",
  "105",
  "106",
  "107",
  "108",
  "109",
  "110",
  "111",
  "112",
  "113",
  "114",
  "115",
  "116",
  "117",
  "118",
  "119",
  "120",
  "121",
  "122",
  "123",
  "124",
  "125",
  "126",
  "127",
  "128",
  "129",
  "130",
  "131",
  "132",
  "133",
  "134",
  "135",
  "136",
  "137",
  "138",
  "139",
  "140",
  "141",
  "142",
  "143",
  "144",
  "145",
  "146",
  "147",
  "148",
  "149",
  "150",
  "151",
  "152",
  "153",
  "154",
  "155",
  "156",
  "157",
  "158",
  "159",
  "160",
  "161",
  "162",
  "163",
  "164",
  "165",
  "166",
  "167",
  "168",
  "169",
  "170",
  "171",
  "172",
  "173",
  "174",
  "175",
  "176",
  "177",
  "178",
  "179",
  "180",
  "181",
  "182",
  "183",
  "184",
  "185",
  "186",
  "187",
  "188",
  "189",
  "190",
  "191",
  "192",
  "193",
  "194",
  "195",
  "196",
  "197",
  "198",
  "199",
  "200",
  "201",
  "202",
  "203",
  "204",
  "205",
  "206",
  "207",
  "208",
  "209",
  "210",
  "211",
  "212",
  "213",
  "214",
  "215",
  "216",
  "217",
  "218",
  "219",
  "220",
  "221",
  "222",
  "223",
  "224",
  "225",
  "226",
  "227",
  "228",
  "229",
  "230",
  "231",
  "232",
  "233",
  "234",
  "235",
  "236",
  "237",
  "238",
  "239",
  "240",
  "241",
  "242",
  "243",
  "244",
  "245",
  "246",
  "247",
  "248",
  "249",
  "250",
  "251",
  "252",
  "253",
  "254",
  "255"
];

type PrevNumber = [
  255,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  128,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  146,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  192,
  193,
  194,
  195,
  196,
  197,
  198,
  199,
  200,
  201,
  202,
  203,
  204,
  205,
  206,
  207,
  208,
  209,
  210,
  211,
  212,
  213,
  214,
  215,
  216,
  217,
  218,
  219,
  220,
  221,
  222,
  223,
  224,
  225,
  226,
  227,
  228,
  229,
  230,
  231,
  232,
  233,
  234,
  235,
  236,
  237,
  238,
  239,
  240,
  241,
  242,
  243,
  244,
  245,
  246,
  247,
  248,
  249,
  250,
  251,
  252,
  253,
  254,
];

type NextNumber = [
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  128,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  146,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  192,
  193,
  194,
  195,
  196,
  197,
  198,
  199,
  200,
  201,
  202,
  203,
  204,
  205,
  206,
  207,
  208,
  209,
  210,
  211,
  212,
  213,
  214,
  215,
  216,
  217,
  218,
  219,
  220,
  221,
  222,
  223,
  224,
  225,
  226,
  227,
  228,
  229,
  230,
  231,
  232,
  233,
  234,
  235,
  236,
  237,
  238,
  239,
  240,
  241,
  242,
  243,
  244,
  245,
  246,
  247,
  248,
  249,
  250,
  251,
  252,
  253,
  254,
  255,
  0
];

type Chars = [
  "\u0000",
  "\u0001",
  "\u0002",
  "\u0003",
  "\u0004",
  "\u0005",
  "\u0006",
  "\u0007",
  "\u0008",
  "\u0009",
  "\u000a",
  "\u000b",
  "\u000c",
  "\u000d",
  "\u000e",
  "\u000f",
  "\u0010",
  "\u0011",
  "\u0012",
  "\u0013",
  "\u0014",
  "\u0015",
  "\u0016",
  "\u0017",
  "\u0018",
  "\u0019",
  "\u001a",
  "\u001b",
  "\u001c",
  "\u001d",
  "\u001e",
  "\u001f",
  "\u0020",
  "\u0021",
  "\u0022",
  "\u0023",
  "\u0024",
  "\u0025",
  "\u0026",
  "\u0027",
  "\u0028",
  "\u0029",
  "\u002a",
  "\u002b",
  "\u002c",
  "\u002d",
  "\u002e",
  "\u002f",
  "\u0030",
  "\u0031",
  "\u0032",
  "\u0033",
  "\u0034",
  "\u0035",
  "\u0036",
  "\u0037",
  "\u0038",
  "\u0039",
  "\u003a",
  "\u003b",
  "\u003c",
  "\u003d",
  "\u003e",
  "\u003f",
  "\u0040",
  "\u0041",
  "\u0042",
  "\u0043",
  "\u0044",
  "\u0045",
  "\u0046",
  "\u0047",
  "\u0048",
  "\u0049",
  "\u004a",
  "\u004b",
  "\u004c",
  "\u004d",
  "\u004e",
  "\u004f",
  "\u0050",
  "\u0051",
  "\u0052",
  "\u0053",
  "\u0054",
  "\u0055",
  "\u0056",
  "\u0057",
  "\u0058",
  "\u0059",
  "\u005a",
  "\u005b",
  "\u005c",
  "\u005d",
  "\u005e",
  "\u005f",
  "\u0060",
  "\u0061",
  "\u0062",
  "\u0063",
  "\u0064",
  "\u0065",
  "\u0066",
  "\u0067",
  "\u0068",
  "\u0069",
  "\u006a",
  "\u006b",
  "\u006c",
  "\u006d",
  "\u006e",
  "\u006f",
  "\u0070",
  "\u0071",
  "\u0072",
  "\u0073",
  "\u0074",
  "\u0075",
  "\u0076",
  "\u0077",
  "\u0078",
  "\u0079",
  "\u007a",
  "\u007b",
  "\u007c",
  "\u007d",
  "\u007e",
  "\u007f",
  "\u0080",
  "\u0081",
  "\u0082",
  "\u0083",
  "\u0084",
  "\u0085",
  "\u0086",
  "\u0087",
  "\u0088",
  "\u0089",
  "\u008a",
  "\u008b",
  "\u008c",
  "\u008d",
  "\u008e",
  "\u008f",
  "\u0090",
  "\u0091",
  "\u0092",
  "\u0093",
  "\u0094",
  "\u0095",
  "\u0096",
  "\u0097",
  "\u0098",
  "\u0099",
  "\u009a",
  "\u009b",
  "\u009c",
  "\u009d",
  "\u009e",
  "\u009f",
  "\u00a0",
  "\u00a1",
  "\u00a2",
  "\u00a3",
  "\u00a4",
  "\u00a5",
  "\u00a6",
  "\u00a7",
  "\u00a8",
  "\u00a9",
  "\u00aa",
  "\u00ab",
  "\u00ac",
  "\u00ad",
  "\u00ae",
  "\u00af",
  "\u00b0",
  "\u00b1",
  "\u00b2",
  "\u00b3",
  "\u00b4",
  "\u00b5",
  "\u00b6",
  "\u00b7",
  "\u00b8",
  "\u00b9",
  "\u00ba",
  "\u00bb",
  "\u00bc",
  "\u00bd",
  "\u00be",
  "\u00bf",
  "\u00c0",
  "\u00c1",
  "\u00c2",
  "\u00c3",
  "\u00c4",
  "\u00c5",
  "\u00c6",
  "\u00c7",
  "\u00c8",
  "\u00c9",
  "\u00ca",
  "\u00cb",
  "\u00cc",
  "\u00cd",
  "\u00ce",
  "\u00cf",
  "\u00d0",
  "\u00d1",
  "\u00d2",
  "\u00d3",
  "\u00d4",
  "\u00d5",
  "\u00d6",
  "\u00d7",
  "\u00d8",
  "\u00d9",
  "\u00da",
  "\u00db",
  "\u00dc",
  "\u00dd",
  "\u00de",
  "\u00df",
  "\u00e0",
  "\u00e1",
  "\u00e2",
  "\u00e3",
  "\u00e4",
  "\u00e5",
  "\u00e6",
  "\u00e7",
  "\u00e8",
  "\u00e9",
  "\u00ea",
  "\u00eb",
  "\u00ec",
  "\u00ed",
  "\u00ee",
  "\u00ef",
  "\u00f0",
  "\u00f1",
  "\u00f2",
  "\u00f3",
  "\u00f4",
  "\u00f5",
  "\u00f6",
  "\u00f7",
  "\u00f8",
  "\u00f9",
  "\u00fa",
  "\u00fb",
  "\u00fc",
  "\u00fd",
  "\u00fe",
  "\u00ff",
];

type Memory = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

type AstNode =
  | { type: ">" }
  | { type: "<" }
  | { type: "+" }
  | { type: "-" }
  | { type: "." }
  | { type: "," }
  | { type: "["; body: AstNode[] };

type Parse<
  S extends string,
  Nodes extends any[] = []
> = S extends `>${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: ">" }]>
  : S extends `<${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: "<" }]>
  : S extends `+${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: "+" }]>
  : S extends `-${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: "-" }]>
  : S extends `.${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: "." }]>
  : S extends `,${infer Rest}`
  ? Parse<Rest, [...Nodes, { type: "," }]>
  : S extends `[${infer Rest}`
  ? Parse<Rest> extends { nodes: infer NodesResult; rest: infer RestResult }
    ? Parse<
      Extract<RestResult, string>,
      [...Nodes, { type: "["; body: Extract<NodesResult, AstNode[]> }]
    >
    : never
  : S extends `]${infer Rest}`
  ? { nodes: Nodes; rest: Rest }
  : Nodes;

type Increment<M extends number[], I extends number> = {
  [K in keyof M]: K extends Itoa[I] ? NextNumber[Extract<M[K], number>] : M[K];
};

type Decrement<M extends number[], I extends number> = {
  [K in keyof M]: K extends Itoa[I] ? PrevNumber[Extract<M[K], number>] : M[K];
};

type Execute<
  Nodes extends AstNode[],
  M extends number[] = Memory,
  I extends number = 0,
  O extends string = ""
> = Nodes extends [infer N, ...infer Rest]
  ? N extends { type: ">" }
    ? Execute<Extract<Rest, AstNode[]>, M, NextNumber[I], O>
    : N extends { type: "<" }
    ? Execute<Extract<Rest, AstNode[]>, M, PrevNumber[I], O>
    : N extends { type: "+" }
    ? Execute<Extract<Rest, AstNode[]>, Increment<M, I>, I, O>
    : N extends { type: "-" }
    ? Execute<Extract<Rest, AstNode[]>, Decrement<M, I>, I, O>
    : N extends { type: "," }
    ? Execute<Extract<Rest, AstNode[]>, M, I, O>
    : N extends { type: "." }
    ? Execute<Extract<Rest, AstNode[]>, M, I, `${O}${Chars[M[I]]}`>
    : N extends { type: "[" }
    ? 0 extends M[I]
      ? Execute<Extract<Rest, AstNode[]>, M, I, O>
      : Execute<Extract<N, { body: AstNode[] }>["body"], M, I, O> extends {
          memory: infer MResult;
          i: infer IResult;
          output: infer OResult;
        }
      ? Execute<
          Nodes,
          Extract<MResult, number[]>,
          Extract<IResult, number>,
          Extract<OResult, string>
        >
      : never
    : never
  : { memory: M; i: I; output: O };

type Bf<S extends string> = Execute<Parse<S>>

type Result = Bf<"++++[>+++++<-]">;
