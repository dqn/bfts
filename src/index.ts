type Numbers = [
  0x00,
  0x01,
  0x02,
  0x03,
  0x04,
  0x05,
  0x06,
  0x07,
  0x08,
  0x09,
  0x0a,
  0x0b,
  0x0c,
  0x0d,
  0x0e,
  0x0f,
  0x10,
  0x11,
  0x12,
  0x13,
  0x14,
  0x15,
  0x16,
  0x17,
  0x18,
  0x19,
  0x1a,
  0x1b,
  0x1c,
  0x1d,
  0x1e,
  0x1f,
  0x20,
  0x21,
  0x22,
  0x23,
  0x24,
  0x25,
  0x26,
  0x27,
  0x28,
  0x29,
  0x2a,
  0x2b,
  0x2c,
  0x2d,
  0x2e,
  0x2f,
  0x30,
  0x31,
  0x32,
  0x33,
  0x34,
  0x35,
  0x36,
  0x37,
  0x38,
  0x39,
  0x3a,
  0x3b,
  0x3c,
  0x3d,
  0x3e,
  0x3f,
  0x40,
  0x41,
  0x42,
  0x43,
  0x44,
  0x45,
  0x46,
  0x47,
  0x48,
  0x49,
  0x4a,
  0x4b,
  0x4c,
  0x4d,
  0x4e,
  0x4f,
  0x50,
  0x51,
  0x52,
  0x53,
  0x54,
  0x55,
  0x56,
  0x57,
  0x58,
  0x59,
  0x5a,
  0x5b,
  0x5c,
  0x5d,
  0x5e,
  0x5f,
  0x60,
  0x61,
  0x62,
  0x63,
  0x64,
  0x65,
  0x66,
  0x67,
  0x68,
  0x69,
  0x6a,
  0x6b,
  0x6c,
  0x6d,
  0x6e,
  0x6f,
  0x70,
  0x71,
  0x72,
  0x73,
  0x74,
  0x75,
  0x76,
  0x77,
  0x78,
  0x79,
  0x7a,
  0x7b,
  0x7c,
  0x7d,
  0x7e,
  0x7f,
  0x80,
  0x81,
  0x82,
  0x83,
  0x84,
  0x85,
  0x86,
  0x87,
  0x88,
  0x89,
  0x8a,
  0x8b,
  0x8c,
  0x8d,
  0x8e,
  0x8f,
  0x90,
  0x91,
  0x92,
  0x93,
  0x94,
  0x95,
  0x96,
  0x97,
  0x98,
  0x99,
  0x9a,
  0x9b,
  0x9c,
  0x9d,
  0x9e,
  0x9f,
  0xa0,
  0xa1,
  0xa2,
  0xa3,
  0xa4,
  0xa5,
  0xa6,
  0xa7,
  0xa8,
  0xa9,
  0xaa,
  0xab,
  0xac,
  0xad,
  0xae,
  0xaf,
  0xb0,
  0xb1,
  0xb2,
  0xb3,
  0xb4,
  0xb5,
  0xb6,
  0xb7,
  0xb8,
  0xb9,
  0xba,
  0xbb,
  0xbc,
  0xbd,
  0xbe,
  0xbf,
  0xc0,
  0xc1,
  0xc2,
  0xc3,
  0xc4,
  0xc5,
  0xc6,
  0xc7,
  0xc8,
  0xc9,
  0xca,
  0xcb,
  0xcc,
  0xcd,
  0xce,
  0xcf,
  0xd0,
  0xd1,
  0xd2,
  0xd3,
  0xd4,
  0xd5,
  0xd6,
  0xd7,
  0xd8,
  0xd9,
  0xda,
  0xdb,
  0xdc,
  0xdd,
  0xde,
  0xdf,
  0xe0,
  0xe1,
  0xe2,
  0xe3,
  0xe4,
  0xe5,
  0xe6,
  0xe7,
  0xe8,
  0xe9,
  0xea,
  0xeb,
  0xec,
  0xed,
  0xee,
  0xef,
  0xf0,
  0xf1,
  0xf2,
  0xf3,
  0xf4,
  0xf5,
  0xf6,
  0xf7,
  0xf8,
  0xf9,
  0xfa,
  0xfb,
  0xfc,
  0xfd,
  0xfe,
  0xff
];

type Chars = [
  "\u0000",
  "\u0001",
  "\u0002",
  "\u0003",
  "\u0004",
  "\u0005",
  "\u0006",
  "\u0007",
  "\u0008",
  "\u0009",
  "\u000a",
  "\u000b",
  "\u000c",
  "\u000d",
  "\u000e",
  "\u000f",
  "\u0010",
  "\u0011",
  "\u0012",
  "\u0013",
  "\u0014",
  "\u0015",
  "\u0016",
  "\u0017",
  "\u0018",
  "\u0019",
  "\u001a",
  "\u001b",
  "\u001c",
  "\u001d",
  "\u001e",
  "\u001f",
  "\u0020",
  "\u0021",
  "\u0022",
  "\u0023",
  "\u0024",
  "\u0025",
  "\u0026",
  "\u0027",
  "\u0028",
  "\u0029",
  "\u002a",
  "\u002b",
  "\u002c",
  "\u002d",
  "\u002e",
  "\u002f",
  "\u0030",
  "\u0031",
  "\u0032",
  "\u0033",
  "\u0034",
  "\u0035",
  "\u0036",
  "\u0037",
  "\u0038",
  "\u0039",
  "\u003a",
  "\u003b",
  "\u003c",
  "\u003d",
  "\u003e",
  "\u003f",
  "\u0040",
  "\u0041",
  "\u0042",
  "\u0043",
  "\u0044",
  "\u0045",
  "\u0046",
  "\u0047",
  "\u0048",
  "\u0049",
  "\u004a",
  "\u004b",
  "\u004c",
  "\u004d",
  "\u004e",
  "\u004f",
  "\u0050",
  "\u0051",
  "\u0052",
  "\u0053",
  "\u0054",
  "\u0055",
  "\u0056",
  "\u0057",
  "\u0058",
  "\u0059",
  "\u005a",
  "\u005b",
  "\u005c",
  "\u005d",
  "\u005e",
  "\u005f",
  "\u0060",
  "\u0061",
  "\u0062",
  "\u0063",
  "\u0064",
  "\u0065",
  "\u0066",
  "\u0067",
  "\u0068",
  "\u0069",
  "\u006a",
  "\u006b",
  "\u006c",
  "\u006d",
  "\u006e",
  "\u006f",
  "\u0070",
  "\u0071",
  "\u0072",
  "\u0073",
  "\u0074",
  "\u0075",
  "\u0076",
  "\u0077",
  "\u0078",
  "\u0079",
  "\u007a",
  "\u007b",
  "\u007c",
  "\u007d",
  "\u007e",
  "\u007f",
  "\u0080",
  "\u0081",
  "\u0082",
  "\u0083",
  "\u0084",
  "\u0085",
  "\u0086",
  "\u0087",
  "\u0088",
  "\u0089",
  "\u008a",
  "\u008b",
  "\u008c",
  "\u008d",
  "\u008e",
  "\u008f",
  "\u0090",
  "\u0091",
  "\u0092",
  "\u0093",
  "\u0094",
  "\u0095",
  "\u0096",
  "\u0097",
  "\u0098",
  "\u0099",
  "\u009a",
  "\u009b",
  "\u009c",
  "\u009d",
  "\u009e",
  "\u009f",
  "\u00a0",
  "\u00a1",
  "\u00a2",
  "\u00a3",
  "\u00a4",
  "\u00a5",
  "\u00a6",
  "\u00a7",
  "\u00a8",
  "\u00a9",
  "\u00aa",
  "\u00ab",
  "\u00ac",
  "\u00ad",
  "\u00ae",
  "\u00af",
  "\u00b0",
  "\u00b1",
  "\u00b2",
  "\u00b3",
  "\u00b4",
  "\u00b5",
  "\u00b6",
  "\u00b7",
  "\u00b8",
  "\u00b9",
  "\u00ba",
  "\u00bb",
  "\u00bc",
  "\u00bd",
  "\u00be",
  "\u00bf",
  "\u00c0",
  "\u00c1",
  "\u00c2",
  "\u00c3",
  "\u00c4",
  "\u00c5",
  "\u00c6",
  "\u00c7",
  "\u00c8",
  "\u00c9",
  "\u00ca",
  "\u00cb",
  "\u00cc",
  "\u00cd",
  "\u00ce",
  "\u00cf",
  "\u00d0",
  "\u00d1",
  "\u00d2",
  "\u00d3",
  "\u00d4",
  "\u00d5",
  "\u00d6",
  "\u00d7",
  "\u00d8",
  "\u00d9",
  "\u00da",
  "\u00db",
  "\u00dc",
  "\u00dd",
  "\u00de",
  "\u00df",
  "\u00e0",
  "\u00e1",
  "\u00e2",
  "\u00e3",
  "\u00e4",
  "\u00e5",
  "\u00e6",
  "\u00e7",
  "\u00e8",
  "\u00e9",
  "\u00ea",
  "\u00eb",
  "\u00ec",
  "\u00ed",
  "\u00ee",
  "\u00ef",
  "\u00f0",
  "\u00f1",
  "\u00f2",
  "\u00f3",
  "\u00f4",
  "\u00f5",
  "\u00f6",
  "\u00f7",
  "\u00f8",
  "\u00f9",
  "\u00fa",
  "\u00fb",
  "\u00fc",
  "\u00fd",
  "\u00fe",
  "\u00ff"
];

type Operator = ">" | "<" | "+" | "-" | "." | "," | Operator[];

type Parse<
  S,
  Operators extends any[] = []
> = S extends `>${infer Rest}`
  ? Parse<Rest, [...Operators, ">"]>
  : S extends `<${infer Rest}`
  ? Parse<Rest, [...Operators, "<"]>
  : S extends `+${infer Rest}`
  ? Parse<Rest, [...Operators, "+"]>
  : S extends `-${infer Rest}`
  ? Parse<Rest, [...Operators, "-"]>
  : S extends `.${infer Rest}`
  ? Parse<Rest, [...Operators, "."]>
  : S extends `,${infer Rest}`
  ? Parse<Rest, [...Operators, ","]>
  : S extends `[${infer Rest}`
  ? Parse<Rest> extends [infer OperatorsResult, infer RestResult]
    ? Parse<RestResult,[...Operators, OperatorsResult]>
    : never
  : S extends `]${infer Rest}`
  ? [Operators, Rest]
  : Operators;

type Head<A> = A extends [infer Head, ...infer _] ? Head : never;
type Append<A, E> = A extends any[] ? [...A, E] : never;

type RRotate<A> = A extends [...infer Rest, infer Tail]
  ? [Tail, ...Rest]
  : never;
type LRotate<A> = A extends [infer Head, ...infer Rest]
  ? [...Rest, Head]
  : never;

type NextNumber<I> = I extends number ? LRotate<Numbers>[I] : never;
type PrevNumber<I> = I extends number ? RRotate<Numbers>[I] : never;

type IncrementHead<A> = A extends [infer Head, ...infer Rest]
  ? [NextNumber<Head>, ...Rest]
  : never;
type DecrementHead<A> = A extends [infer Head, ...infer Rest]
  ? [PrevNumber<Head>, ...Rest]
  : never;

type Memory = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

type Execute<Operators, M = Memory, O = []> = Operators extends [
  infer N,
  ...infer Rest
]
  ? N extends ">"
    ? Execute<Rest, LRotate<M>, O>
    : N extends "<"
    ? Execute<Rest, RRotate<M>, O>
    : N extends "+"
    ? Execute<Rest, IncrementHead<M>, O>
    : N extends "-"
    ? Execute<Rest, DecrementHead<M>, O>
    : N extends ","
    ? Execute<Rest, M, O>
    : N extends "."
    ? Execute<Rest, M, Append<O, Head<M>>>
    : N extends Operator[]
    ? 0 extends Head<M>
      ? Execute<Rest, M, O>
      : Execute<N, M, O> extends {
          memory: infer MResult;
          output: infer OResult;
        }
      ? Execute<Operators, MResult, OResult>
      : never
    : never
  : { memory: M; output: O };

type Bf<S> = Execute<Parse<S>>;

type Result1 = Bf<"+++++[>+++++<-]>++++++.">;
type Result2 = Bf<"+++++++++++++++++++++.">;
